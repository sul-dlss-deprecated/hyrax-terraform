AWSTemplateFormatVersion: '2010-09-09'
Description: Hyku (branch '{{branch}}'; revision '{{commit}}')
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
  S3Bucket:
    Type: String
    Description: S3 bucket to the cfn deployment artifacts
  S3BucketEB:
    Type: String
    Description: S3 bucket to the eb deployment artifacts
  S3KeyPrefix:
    Description: S3 prefix to deployment artifacts
    Type: String
  WebappS3Key:
    Type: String
    Description: S3 key to webapp deployment artifacts
  PublicZoneName:
    Type: String
    Description: Existing Route53 zone; used to create a public DNS record for the
      web application
  DatabaseUsername:
    Type: String
    Description: Database Root Username
  DatabasePassword:
    Type: String
    Description: Password for the DB Root User
    NoEcho: 'true'
  DatabaseName:
    Type: String
    Description: Name of the database
  DatabaseStorageSize:
    Type: String
    Description: Size of DB in Gigs
  DatabaseMultiAZ:
    Type: String
    Description: Launch the database in multiple availability zones
  BeanstalkHealthReportingSystemType:
    Type: String
    Description: Health reporting type for beanstalk apps
    AllowedValues: [enhanced, basic]
  FcrepoDatabaseUsername:
    Type: String
    Description: Database Root Username
  FcrepoDatabasePassword:
    Type: String
    Description: Password for the DB Root User
    NoEcho: 'true'
  FcrepoDatabaseName:
    Type: String
    Description: Name of the database
  FcrepoDatabaseStorageSize:
    Type: String
    Description: Size of DB in Gigs
  FcrepoDatabaseMultiAZ:
    Type: String
    Description: Launch the database in multiple availability zones
  FcrepoHomePath:
    Type: String
    Description: Fcrepo home directory path
  FcrepoS3AccessKey:
    Type: String
    Description: Access Key Id for IAM user with access to Fcrepo bucket
  FcrepoS3SecretKey:
    Type: String
    Description: Secret Access Key for IAM user with access to Fcrepo bucket
  FcrepoS3BucketName:
    Type: String
    Description: Name of S3 bucket for Fedora binary content
  SecretKeyBase:
    Type: String
    Description: Secret key for Rails
    NoEcho: 'true'
  FcrepoInstanceType:
    Type: String
    Description: Instance type to launch
  S3FedoraFilename:
    Type: String
    Description: S3 key to the Fcrepo war
  FcrepoMinSize:
    Type: String
    Description: Minimum number of Fedora instances to launch
  FcrepoMaxSize:
    Type: String
    Description: Maximum number of Fedora instances to launch
  SolrCloudSize:
    Type: Number
    Description: Number of Solr instances to launch
  SolrCloudInstanceType:
    Type: String
    Description: Instance type to launch
  SolrCloudMaxSize:
    Type: Number
    Description: Maximum number of instances that can be launched in your ECS cluster
  SolrS3Key:
    Type: String
    Description: S3 key for solr source bundle
  ZookeeperEnsembleSize:
    Type: Number
    Description: Number of instances to launch
  ZookeeperEnsembleInstanceType:
    Type: String
    Description: Instance type to launch
  ZookeeperEnsembleMaxSize:
    Type: String
    Description: Max number of zks
  ZookeeperS3Key:
    Type: String
    Description: S3 key for zookeeper source bundle
  ZookeeperDNSRecordName:
    Type: String
    Description: Docker Image for zks
  WorkerInstanceType:
    Type: String
    Description: Instance type to launch
  WorkerMinSize:
    Type: Number
    Description: Minimum number of instances to launch
  WorkerMaxSize:
    Type: Number
    Description: Maximum number of instances to launch
  WebappInstanceType:
    Type: String
    Description: Instance type to launch
  WebappMinSize:
    Type: Number
    Description: Minimum number of instances to launch
  WebappMaxSize:
    Type: Number
    Description: Maximum number of instances to launch
  RedisInstanceType:
    Type: String
    Description: Instance type to launch
  BastionInstanceType:
    Type: String
    Description: The EC2 instance type
  DatabaseInstanceType:
    Type: String
    Description: Instance type to launch
  FcrepoDatabaseInstanceType:
    Type: String
    Description: Instance type to launch
  SlackWebhookToken:
    Type: String
    Description: Slack generated token for Incoming Webhook
    NoEcho: 'true'
  SlackWebhookChannel:
    Type: String
    Description: Slack channel for posting notifications
  ContinuousDeployment:
    Type: String
    Description: Configure continuous deployment for the webapp and workers?
  QueuePrefix:
    Type: String
    Description: SQS Queue prefix
  SSLCertificateId:
    Type: String
    Description: The Amazon Resource Name (ARN) of the SSL certificate
  GoogleAnalyticsId:
    Type: String
    Description: The Google Analytics id, e.g UA-111111-1
  EnableOpenSignup:
    Type: String
    Description: True to allow open self-signup, false to disable
  DisableOpenTenantCreation:
    Type: String
    Description: True to restrict tenant creation to admins, false to open creation to any registered users
  AccountInvitationFromEmail:
    Type: String
    Description: Email address from which account invitations are sent
  ContactEmail:
    Type: String
    Description: Email address to which contact form messages are sent
  GeonamesUsername:
    Type: String
    Description: The registered Geonames account name
  HoneybadgerApiKey:
    Type: String
    Description: The api key for honeybadger.io
  LogzioKey:
    Type: String
    Description: The logz.io key
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Deployment Artifacts
        Parameters: [S3Bucket, S3KeyPrefix, WebappS3Key]
      - Label:
          default: Network Configuration
        Parameters: [KeyName, PublicZoneName]
      - Label:
          default: Resources
        Parameters: [WorkerInstanceType, WorkerMinSize, WorkerMaxSize, WebappInstanceType,
          WebappMinSize, WebappMaxSize, DatabaseInstanceType, FcrepoDatabaseInstanceType,
          RedisInstanceType, FcrepoInstanceType, SolrCloudSize, SolrCloudInstanceType,
          ZookeeperEnsembleSize, ZookeeperEnsembleInstanceType]
      - Label:
          default: Fedora Repository Configuration
        Parameters: [FcrepoDatabaseUsername, FcrepoDatabasePassword, FcrepoHomePath,
          FcrepoS3AccessKey, FcrepoS3SecretKey, FcrepoS3BucketName]
      - Label:
          default: Application Configuration
        Parameters: [DatabaseUsername, DatabasePassword, SecretKeyBase, SSLCertificateId]
Resources:
  vpc:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        KeyName: !Join [',', [!Ref 'KeyName']]
        HostedZoneName: !Sub '${AWS::StackName}.vpc.${PublicZoneName}'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/vpc.yaml'
  securitygroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        VPC: !GetAtt [vpc, Outputs.VPCID]
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/securitygroups.yaml'
  solrcloud:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        S3Bucket: !Ref 'S3Bucket'
        S3KeyPrefix: !Ref 'S3KeyPrefix'
        KeyName: !Join [',', [!Ref 'KeyName']]
        SubnetID: !GetAtt [vpc, Outputs.PrivateSubnets]
        HostedZoneName: !GetAtt [vpc, Outputs.HostedZoneName]
        HostedZoneID: !GetAtt [vpc, Outputs.HostedZoneID]
        ZookeeperEnsembleSize: !Ref 'ZookeeperEnsembleSize'
        ZookeeperEnsembleMaxSize: !Ref 'ZookeeperEnsembleMaxSize'
        ZookeeperSecurityGroups: !Join [',', [!GetAtt [securitygroups, Outputs.Zookeeper],
            !GetAtt [securitygroups, Outputs.Default]]]
        ZookeeperLBSecurityGroups: !GetAtt [securitygroups, Outputs.ZookeeperLb]
        ZookeeperHealthReportingSystemType: !Ref 'BeanstalkHealthReportingSystemType'
        ZookeeperS3Bucket: !Ref 'S3BucketEB'
        ZookeeperS3Key: !Ref 'ZookeeperS3Key'
        ZookeeperInstanceType: !Ref 'ZookeeperEnsembleInstanceType'
        ZookeeperDNSRecordName: !Ref 'ZookeeperDNSRecordName'
        SolrCloudSize: !Ref 'SolrCloudSize'
        SolrCloudMaxSize: !Ref 'SolrCloudMaxSize'
        SolrSecurityGroups: !Join [',', [!GetAtt [securitygroups, Outputs.Solr], !GetAtt [
            securitygroups, Outputs.Default]]]
        SolrLBSecurityGroups: !GetAtt [securitygroups, Outputs.SolrLb]
        SolrHealthReportingSystemType: !Ref 'BeanstalkHealthReportingSystemType'
        SolrS3Bucket: !Ref 'S3BucketEB'
        SolrS3Key: !Ref 'SolrS3Key'
        SolrCloudInstanceType: !Ref 'SolrCloudInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/solrcloud.yaml'
  fcrepo:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Sub ${AWS::StackName}-fcrepo
        KeyName: !Join [',', [!Ref 'KeyName']]
        SubnetID: !GetAtt [vpc, Outputs.PrivateSubnets]
        SecurityGroups: !Join [',', [!GetAtt [securitygroups, Outputs.Fcrepo], !GetAtt [
              securitygroups, Outputs.Default]]]
        LBSecurityGroups: !GetAtt [securitygroups, Outputs.FcrepoLb]
        S3Bucket: !Ref 'S3BucketEB'
        S3Key: !Ref 'S3FedoraFilename'
        MinSize: !Ref 'FcrepoMinSize'
        MaxSize: !Ref 'FcrepoMaxSize'
        HostedZoneName: !GetAtt [vpc, Outputs.HostedZoneName]
        InstanceType: !Ref 'FcrepoInstanceType'
        RDSHostname: !GetAtt [fcrepodb, Outputs.EndpointAddress]
        RDSPort: !GetAtt [fcrepodb, Outputs.EndpointPort]
        RDSUsername: !Ref 'FcrepoDatabaseUsername'
        RDSPassword: !Ref 'FcrepoDatabasePassword'
        HomePath: !Ref 'FcrepoHomePath'
        BinaryStoreS3AccessKey: !Ref 'FcrepoS3AccessKey'
        BinaryStoreS3SecretKey: !Ref 'FcrepoS3SecretKey'
        BinaryStoreS3Bucket: !Ref 'FcrepoS3BucketName'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/fcrepo.yaml'
  redis:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubnetID: !GetAtt [vpc, Outputs.PrivateSubnets]
        SecurityGroups: !GetAtt [securitygroups, Outputs.Redis]
        InstanceType: !Ref 'RedisInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/redis.yaml'
  database:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubnetID: !GetAtt [vpc, Outputs.PrivateSubnets]
        SecurityGroups: !GetAtt [securitygroups, Outputs.Database]
        MasterUsername: !Ref 'DatabaseUsername'
        MasterUserPassword: !Ref 'DatabasePassword'
        DatabaseName: !Ref 'DatabaseName'
        AllocatedStorage: !Ref 'DatabaseStorageSize'
        MultiAZDatabase: !Ref 'DatabaseMultiAZ'
        DBInstanceClass: !Ref 'DatabaseInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/postgres.yaml'
  fcrepodb:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubnetID: !GetAtt [vpc, Outputs.PrivateSubnets]
        SecurityGroups: !GetAtt [securitygroups, Outputs.FcrepoDatabase]
        MasterUsername: !Ref 'FcrepoDatabaseUsername'
        MasterUserPassword: !Ref 'FcrepoDatabasePassword'
        DatabaseName: !Ref 'FcrepoDatabaseName'
        AllocatedStorage: !Ref 'FcrepoDatabaseStorageSize'
        MultiAZDatabase: !Ref 'FcrepoDatabaseMultiAZ'
        DBInstanceClass: !Ref 'FcrepoDatabaseInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/postgres.yaml'
  application:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        KeyName: !Join [',', [!Ref 'KeyName']]
        S3Bucket: !Ref 'S3Bucket'
        S3BucketEB: !Ref 'S3BucketEB'
        S3Key: !Ref 'WebappS3Key'
        S3KeyPrefix: !Ref 'S3KeyPrefix'
        BeanstalkSNSTopic: !GetAtt [slack, Outputs.BeanstalkSNSTopic]
        QueuePrefix: !Ref 'QueuePrefix'
        PrivateSubnets: !GetAtt [vpc, Outputs.PrivateSubnets]
        PublicSubnets: !GetAtt [vpc, Outputs.PublicSubnets]
        SecurityGroups: !Join [',', [!GetAtt [securitygroups, Outputs.Webapp], !GetAtt [
              securitygroups, Outputs.Default]]]
        LBSecurityGroups: !GetAtt [securitygroups, Outputs.WebappLb]
        HostedZoneName: !Ref 'PublicZoneName'
        SecretKeyBase: !Ref 'SecretKeyBase'
        FcrepoUrl: !GetAtt [fcrepo, Outputs.URL]
        SolrUrl: !GetAtt [solrcloud, Outputs.SolrURL]
        ZookeeperHosts: !Sub ${solrcloud.Outputs.ZookeeperURL}/configs
        RedisHost: !GetAtt [redis, Outputs.EndpointAddress]
        RedisPort: !GetAtt [redis, Outputs.EndpointPort]
        RDSDatabaseName: !GetAtt [database, Outputs.DatabaseName]
        RDSHostname: !GetAtt [database, Outputs.EndpointAddress]
        RDSPort: !GetAtt [database, Outputs.EndpointPort]
        RDSUsername: !Ref 'DatabaseUsername'
        RDSPassword: !Ref 'DatabasePassword'
        WebappInstanceType: !Ref 'WebappInstanceType'
        WebappMinSize: !Ref 'WebappMinSize'
        WebappMaxSize: !Ref 'WebappMaxSize'
        WorkerInstanceType: !Ref 'WorkerInstanceType'
        WorkerMinSize: !Ref 'WorkerMinSize'
        WorkerMaxSize: !Ref 'WorkerMaxSize'
        WebappHealthReportingSystemType: !Ref 'BeanstalkHealthReportingSystemType'
        WorkerHealthReportingSystemType: !Ref 'BeanstalkHealthReportingSystemType'
        SSLCertificateId: !Ref 'SSLCertificateId'
        ContinuousDeployment: !Ref 'ContinuousDeployment'
        GoogleAnalyticsId: !Ref 'GoogleAnalyticsId'
        EnableOpenSignup: !Ref 'EnableOpenSignup'
        DisableOpenTenantCreation: !Ref 'DisableOpenTenantCreation'
        AccountInvitationFromEmail: !Ref 'AccountInvitationFromEmail'
        ContactEmail: !Ref 'ContactEmail'
        GeonamesUsername: !Ref 'GeonamesUsername'
        HoneybadgerApiKey: !Ref 'HoneybadgerApiKey'
        LogzioKey: !Ref 'LogzioKey'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/application.yaml'
  bastion:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Sub ${AWS::StackName}-bastion
        KeyName: !Join [',', [!Ref 'KeyName']]
        SubnetID: !GetAtt [vpc, Outputs.PublicSubnets]
        InstanceType: !Ref 'BastionInstanceType'
        SecurityGroups: !GetAtt [securitygroups, Outputs.Bastion]
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/bastion.yaml'
  slack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SlackWebhookToken: !Ref 'SlackWebhookToken'
        SlackWebhookChannel: !Ref 'SlackWebhookChannel'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/slack.yaml'
  mail:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Domain: !Sub ${AWS::StackName}.${PublicZoneName}
        HostedZoneName: !Ref 'PublicZoneName'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/mail.yaml'
Outputs:
  URL:
    Description: URL for the deployed application
    Value: !GetAtt [application, Outputs.URL]
