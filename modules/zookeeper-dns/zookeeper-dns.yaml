AWSTemplateFormatVersion: '2010-09-09'
Description: Hyku stack for zookeeper dns
Parameters:
  ZookeeperEnvironmentName:
    Type: String
    Description: Environment name from zookeeper stack
  ZookeeperRecordName:
    Type: String
    Description: Environment name from zookeeper stack
  ZookeeperHostedZoneID:
    Type: String
    Description: Environment name from zookeeper stack
  SubnetID:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnets for zk stack
  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Private subnets for zk stack
Resources:
  # Provides AutoScalingGroupName for the zookeeper Environment
  # Refer by using: !GetAtt [BeanstalkStack, AutoScalingGroupName]
  BeanstalkStack:
    Type: Custom::BeanstalkStack
    Properties:
      ServiceToken: !GetAtt [BeanstalkStackOutputs, Arn]
      EnvironmentName: !Ref ZookeeperEnvironmentName
  # Returns Auto Scaling Group Name for a given Beanstalk Environment Name
  BeanstalkStackOutputs:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          var response = require('cfn-response');
          exports.handler = function(event, context) {
              console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));
              if (event.RequestType == 'Delete') {
                  response.send(event, context, response.SUCCESS);
                  return;
              }
              var environmentName = event.ResourceProperties.EnvironmentName;
              var responseData = {};
              if (environmentName) {
                  var aws = require('aws-sdk');
                  var eb  = new aws.ElasticBeanstalk();
                  eb.describeEnvironmentResources({EnvironmentName: environmentName}, function(err, data) {
                      if (err) {
                          responseData = { Error: 'describeEnvironmentResources call failed' };
                          console.log(responseData.Error + ':\\n', err);
                          response.send(event, context, resource.FAILED, responseData);
                      } else {
                          responseData = { AutoScalingGroupName: data.EnvironmentResources.AutoScalingGroups[0].Name };
                          response.send(event, context, response.SUCCESS, responseData);
                      }
                  });
              } else {
                  responseData = {Error: 'Environment name not specified'};
                  console.log(responseData.Error);
                  response.send(event, context, response.FAILED, responseData);
              }
          };
      Handler: index.handler
      Runtime: nodejs4.3
      Timeout: '10'
      VpcConfig:
        SubnetIds: !Ref 'SubnetID'
        SecurityGroupIds: !Ref 'SecurityGroups'
      Role: !GetAtt [LambdaExecutionRole, Arn]
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-zookeeper'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action: ['cloudformation:DescribeStacks', 'elasticbeanstalk:Describe*']
              Resource: '*'
            - Effect: Allow
              Action: ['route53:*']
              Resource: ['*']
  CloudWatchASGRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance Launch Successful
          - EC2 Instance Terminate Successful
        detail:
          AutoScalingGroupName:
            - !GetAtt [BeanstalkStack, AutoScalingGroupName]
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt [UpsertRoute53Record, Arn]
          Id: UpsertRoute53RecordV1
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [UpsertRoute53Record, Arn]
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
  # Initializes UpsertRoute53Record lambda function so it runs at stack creation time
  InitializeUpsertLambda:
    Type: Custom::InitializeUpsertLambda
    Properties:
      ServiceToken: !GetAtt [UpsertRoute53Record, Arn]
      ZookeeperASGName: !GetAtt [BeanstalkStack, AutoScalingGroupName]
  # Creates/Deletes a round robin DNS entry for the zookeeper hosts
  # Is updated by a CloudWatch Rule tied to the Auto Scaling Group
  # for the zookeeper Beanstalk Environment
  UpsertRoute53Record:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          console.log('Loading function');

          var response = require('cfn-response');
          var AWS = require('aws-sdk');

          exports.handler = function(event, context) {
            console.log('event=%j', event);

            get_instance_ids(event, context);
          };

          function get_instance_ids(event, context) {
            if (event.detail) {
              var asgName = event.detail.AutoScalingGroupName;
            } else {
              var asgName = event.ResourceProperties.ZookeeperASGName;
            }

            var autoscaling = new AWS.AutoScaling();
            var asgParams = {
              AutoScalingGroupNames: [asgName],
              MaxRecords: 1
            };
            autoscaling.describeAutoScalingGroups(asgParams, function(err, data) {
              if (err) {
                  console.log(err, err.stack);
                  response.send(event, context, response.FAILED, data);
              } else {
                  var instances = data.AutoScalingGroups[0].Instances
                  var instanceIds = instances.map(function (instance) {
                       return instance.InstanceId;
                  });
                  console.log(instanceIds);
                  get_instance_ips(event, context, instanceIds)
              }
            });
          }

          function get_instance_ips(event, context, instanceIds) {
              var ec2 = new AWS.EC2();
              var ec2Params = {
                  InstanceIds: instanceIds
              };
              ec2.describeInstances(ec2Params, function(err, data) {
                  if (err) {
                      console.log(err, err.stack);
                      response.send(event, context, response.FAILED, data);
                  } else {
                      var reservations = data.Reservations;
                      var instances = reservations.map(function (reservation) {
                          return reservation.Instances;
                      });
                      var instanceIps = instances.map(function (instance) {
                          return instance[0].PrivateIpAddress;
                      });
                      console.log(instanceIps);
                      upsert_hostedzone(event, context, instanceIps)
                  }
              });
          }

          function upsert_hostedzone(event, context, instanceIps) {
              var route53 = new AWS.Route53();

              if (event.RequestType == 'Delete') {
                var actionChange = "DELETE"
              } else {
                var actionChange = "UPSERT"
              }

              var resourceRecords = instanceIps.map(function (ip) {
                  return { "Value": ip };
              });
              var r53Params = {
                ChangeBatch: {
                  Changes: [
                    {
                      Action: actionChange,
                      ResourceRecordSet: {
                        Name: process.env.RecordSetName,
                        Type: "A",
                        ResourceRecords: resourceRecords,
                        TTL: 300
                      }
                    }
                  ],
                  Comment: "RoundRobin record for zookeeper hosts"
                },
                HostedZoneId: process.env.HostedZoneId
              };
              route53.changeResourceRecordSets(r53Params, function(err, data) {
                  if (err) {
                      console.log(err, err.stack);
                      response.send(event, context, response.FAILED, data);
                  } else {
                      console.log(data);
                      response.send(event, context, response.SUCCESS, data);
                  }
              });
          }
      Handler: index.handler
      Runtime: nodejs4.3
      Timeout: '10'
      Environment:
        Variables:
          RecordSetName: !Ref 'ZookeeperRecordName'
          HostedZoneId: !Ref 'ZookeeperHostedZoneID'
      VpcConfig:
        SubnetIds: !Ref 'SubnetID'
        SecurityGroupIds: !Ref 'SecurityGroups'
      Role: !GetAtt [LambdaExecutionRole, Arn]
Outputs:
  ZookeeperRecordName:
    Description: Route53 record name for zookeeper ips
    Value: !Ref ZookeeperRecordName
