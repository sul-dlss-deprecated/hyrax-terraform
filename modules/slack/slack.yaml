AWSTemplateFormatVersion: '2010-09-09'
Description: Hyku slack stack for notifications
Parameters:
  SlackWebhookToken:
    Type: String
    Description: Slack generated token for incoming webhook
    NoEcho: 'true'
  SlackWebhookChannel:
    Type: String
    Description: Slack channel for posting notifications
Conditions:
  CreateSlackIntegration: !Not [!Equals [!Ref 'SlackWebhookToken', '']]
Resources:
  BeanstalkSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - !If
          - CreateSlackIntegration
          -
            Endpoint: !GetAtt [LambdaSNSFunction, Arn]
            Protocol: lambda
          - !Ref 'AWS::NoValue'
  LambdaSNSFunction:
    Type: AWS::Lambda::Function
    Condition: CreateSlackIntegration
    Properties:
      Code:
        ZipFile: !Sub |
            var https = require('https');
            var util = require('util');
            exports.handler = function(event, context) {
                console.log(JSON.stringify(event, null, 2));
                console.log('From SNS:', event.Records[0].Sns.Message);
                var postData = {
                  'channel': '#${SlackWebhookChannel}',
                  'text': '*' + event.Records[0].Sns.Subject + '*',
                };
                var message = event.Records[0].Sns.Message;
                var severity = 'good';
                var dangerMessages = [
                    ' but with errors',
                    ' to RED',
                    ' to Severe',
                    'During an aborted deployment',
                    'Failed to deploy application',
                    'Failed to deploy configuration',
                    'has a dependent object',
                    'is not authorized to perform',
                    'Pending to Degraded',
                    'Stack deletion failed',
                    'Unsuccessful command execution',
                    'You do not have permission',
                    'Your quota allows for 0 more running instance',
                    ];
                var warningMessages = [
                    ' aborted operation.',
                    ' to YELLOW',
                    ' to Unknown',
                    'Adding instance ',
                    'Degraded to Info',
                    'Deleting SNS topic',
                    'is currently running under desired capacity',
                    'Ok to Info',
                    'Ok to Warning',
                    'Pending Initialization',
                    'Removed instance ',
                    'Rollback of environment',
                    ];
                for(var dangerMessagesItem in dangerMessages) {
                    if (message.indexOf(dangerMessages[dangerMessagesItem]) != -1) {
                        severity = 'danger';
                        break;
                    },
                },
                // Only check for warning messages if necessary,
                if (severity == 'good') {
                    for(var warningMessagesItem in warningMessages) {
                        if (message.indexOf(warningMessages[warningMessagesItem]) != -1) {
                            severity = 'warning';
                            break;
                        },
                    },
                },
                postData.attachments = [
                    {
                        'color': severity,
                        'text': message,
                    },
                ];
                var options = {
                    method: 'POST',
                    hostname: 'hooks.slack.com',
                    port: 443,
                    path: '/services/${SlackWebhookToken}',
                };
                var req = https.request(options, function(res) {
                  res.setEncoding('utf8');
                  res.on('data', function (chunk) {
                    context.done(null);
                  });
                });
                req.on('error', function(e) {
                  console.log('problem with request: ' + e.message);
                });
                req.write(util.format('%j', postData));
                req.end();
            };
      Handler: index.handler
      Runtime: nodejs4.3
      Timeout: '10'
      Role: !GetAtt [LambdaExecutionRole, Arn]
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: CreateSlackIntegration
    Properties:
      FunctionName: !GetAtt [LambdaSNSFunction, Arn]
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'BeanstalkSNSTopic'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: CreateSlackIntegration
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth']
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-slack'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action: ['cloudformation:DescribeStacks', 'elasticbeanstalk:Describe*']
              Resource: '*'
Outputs:
  BeanstalkSNSTopic:
    Value: !Ref 'BeanstalkSNSTopic'
